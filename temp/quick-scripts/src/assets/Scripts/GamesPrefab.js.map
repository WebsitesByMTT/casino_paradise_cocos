{"version":3,"sources":["assets/Scripts/GamesPrefab.js"],"names":["cc","Class","Component","properties","imageView","Sprite","imageClick","Button","addToFavouirteButton","mywebView","WebView","webviewUrl","lobbyNode","redHeart","type","Node","blueHeart","onLoad","setupEventListeners","find","getComponent","node","off","onTouchStart","onTouchEnd","onTouchCancel","on","updateItem","data","gameCategory","myData","console","log","assetManager","loadRemote","thumbnail","err","texture","error","spriteFrame","SpriteFrame","active","event","touchEndPos","getLocation","distance","sub","touchStartPos","mag","onClickItem","interactable","slug","undefined","addToFavouirte","inst","address","K","ServerAddress","ipAddress","ServerAPI","getGameById","ServerCom","httpRequest","response","url","openWebView","bind","userData","gameId","_id","addtoFav","id","errorHeading","string","errorLable","message","loginErrorNode","setTimeout","category","fetchGames"],"mappings":"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","sourceRoot":"/","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        imageView: cc.Sprite,\n        imageClick: cc.Button,\n        addToFavouirteButton: cc.Button,\n        mywebView: cc.WebView,\n        webviewUrl: null,\n        lobbyNode: null,\n        redHeart:{\n            default: null,\n            type: cc.Node\n        },\n        blueHeart:{\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    onLoad() {\n        this.setupEventListeners();\n        const lobbyNode = cc.find(\"Canvas/LobbyNode\");\n        if (lobbyNode) {\n            this.lobbyNode = lobbyNode.getComponent(\"Lobby\");\n            if (!this.lobbyNode) {\n                // console.error(\"Lobby component not found on LobbyNode\");\n            }\n        } else {\n            // console.error(\"LobbyNode not found in the scene\");\n        }\n    },\n\n    setupEventListeners() {\n        // // Remove existing listeners to prevent duplicate event calls\n        // this.imageClick.node.off('click', this.onClickItem, this);\n        // this.addToFavouirteButton.node.off('click', this.addToFavouirte, this);\n\n        // // Add new listeners\n        // this.imageClick.node.on('click', this.onClickItem, this);\n        // this.addToFavouirteButton.node.on('click', this.addToFavouirte, this);\n            // Remove existing listeners to prevent duplicate event calls\n            this.imageClick.node.off('touchstart', this.onTouchStart, this);\n            this.imageClick.node.off('touchend', this.onTouchEnd, this);\n            this.imageClick.node.off('touchcancel', this.onTouchCancel, this);\n    \n            // Add new listeners\n            this.imageClick.node.on('touchstart', this.onTouchStart, this);\n            this.imageClick.node.on('touchend', this.onTouchEnd, this);\n            this.imageClick.node.on('touchcancel', this.onTouchCancel, this);\n    },\n\n    updateItem(data, gameCategory) {\n        let myData = data\n        console.log(data, \"check data\");\n        cc.assetManager.loadRemote(data.thumbnail, (err, texture) => {\n            if (err) {\n                console.error(err);\n                return;\n            }\n            this.imageView.spriteFrame = new cc.SpriteFrame(texture);\n        });\n        if(gameCategory == \"fav\"){\n            this.blueHeart.active = false;\n            this.redHeart.active = true;\n        }\n\n        // Update click listeners with new data\n        this.imageClick.node.off('click');\n        this.addToFavouirteButton.node.off('click');\n\n        this.imageClick.node.on('touchend', (event) => {\n            let touchEndPos = event.getLocation();\n            let distance = touchEndPos.sub(this.touchStartPos).mag();\n            console.log(distance, \"on inside update End Prefab\");\n            if (distance < 10) { // Adjust this threshold as needed\n                this.onClickItem(data);\n            }\n            // this.onClickItem(data);\n            this.imageClick.node.interactable = false;\n        });\n        this.addToFavouirteButton.node.on('click', () => {\n            if(myData.slug == undefined){\n                return\n            }\n            else{\n                this.addToFavouirte(myData);\n                this.addToFavouirteButton.node.interactable = false;\n            }\n        });\n    },\n\n    onTouchStart(event) {\n        this.touchStartPos = event.getLocation();\n    },\n\n    onTouchEnd(event) {\n        let touchEndPos = event.getLocation();\n        let distance = touchEndPos.sub(this.touchStartPos).mag();\n        if (distance < 10) { // Adjust this threshold as needed\n            // this.onClickItem(this.data);\n        }\n    },\n\n    onTouchCancel(event) {\n        this.touchStartPos = null;\n    },\n\n    //Prefab Clicke to open the game\n    onClickItem(data) {\n        let inst = this;\n        if (data.slug == undefined) {\n            return;\n        }\n        let address = K.ServerAddress.ipAddress + K.ServerAPI.getGameById + `/${data.slug}`;\n        ServerCom.httpRequest(\"GET\", address, \"\", function(response) {\n            if (response.url == undefined) {\n                return;\n            }\n            let webviewUrl = response.url;\n            if (inst.lobbyNode) {\n                inst.lobbyNode.openWebView(webviewUrl);\n            }\n        }.bind(this));\n    },\n\n    addToFavouirte(myData) {\n        let inst = this\n        if (myData.slug == undefined) {\n            return;\n        } else {\n            let userData = {\n                gameId: myData._id,\n                type: inst.blueHeart.active ? \"add\" : \"remove\"\n            };\n            let address = K.ServerAddress.ipAddress + K.ServerAPI.addtoFav + `/${this.lobbyNode.id}`;\n            // console.log(this.lobbyNode.id, \"check user Id\");\n            ServerCom.httpRequest(\"PUT\", address, userData, function(response) {\n                // console.log(\"response\", response);\n                ServerCom.errorHeading.string = \"Success\";\n                ServerCom.errorLable.string = response.message\n                if(response.message == \"Game added to favourites\"){\n                    inst.redHeart.active = true;\n                    inst.blueHeart.active = false;\n                }else{\n                    inst.blueHeart.active = true;\n                    inst.redHeart.active = false;\n                }\n                ServerCom.loginErrorNode.active = true;\n                setTimeout(() => {\n                    ServerCom.loginErrorNode.active = false;\n                }, 2000);\n                if (inst.lobbyNode && inst.lobbyNode.category == \"fav\") {\n                    inst.lobbyNode.fetchGames(\"fav\");\n                }\n                   \n            }.bind(this));\n        }\n    },\n});"]}