
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/login/Login.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ac1ac5oJ6VEUL3rD+Zja0yl', 'Login');
// Scripts/login/Login.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    userName: {
      "default": null,
      type: cc.EditBox
    },
    password: {
      "default": null,
      type: cc.EditBox
    },
    rememberMe: {
      "default": null,
      type: cc.Toggle
    },
    lobbyNode: {
      "default": null,
      type: cc.Node
    },
    errorLable: {
      "default": null,
      type: cc.Label
    },
    loginErrorNode: {
      "default": null,
      type: cc.Node
    },
    customKeyboard: {
      "default": null,
      type: cc.Node
    },
    smallAlphabet: {
      "default": null,
      type: cc.Node
    },
    capitalAlphabet: {
      "default": null,
      type: cc.Node
    },
    symbolsAlphabet: {
      "default": null,
      type: cc.Node
    },
    capsButton: {
      "default": null,
      type: cc.Node
    },
    smallButton: {
      "default": null,
      type: cc.Node
    },
    deleteButton: {
      "default": null,
      type: cc.Node
    },
    spaceButton: {
      "default": null,
      type: cc.Node
    },
    commaButton: {
      "default": null,
      type: cc.Node
    },
    dotButton: {
      "default": null,
      type: cc.Node
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    if (this.rememberMe) {
      this.rememberMe.isChecked = false;
    }

    this.activeInputField = null;
    this.setupInputFocusListeners();
    this.setupKeyboardButtonListeners();
    this.disableDefaultKeyboard();
  },
  disableDefaultKeyboard: function disableDefaultKeyboard() {
    if (cc.sys.isMobile && cc.sys.isBrowser) {
      var inputs = document.querySelectorAll('input, textarea');
      inputs.forEach(function (input) {
        input.style.pointerEvents = 'none'; // Disable interactions
      });
    }
  },
  setupInputFocusListeners: function setupInputFocusListeners() {
    if (cc.sys.isMobile && cc.sys.isBrowser) {
      // Attach focus event listeners to username and password input fields
      if (this.userName) {
        this.userName.node.on(cc.Node.EventType.TOUCH_END, this.onInputFieldClicked, this);
      }

      if (this.password) {
        this.password.node.on(cc.Node.EventType.TOUCH_END, this.onInputFieldClicked, this);
      }
    }
  },
  onInputFieldClicked: function onInputFieldClicked(event) {
    // Focus the corresponding input field to trigger the keyboard
    var inputNode = event.currentTarget.getComponent(cc.EditBox);

    if (inputNode) {
      // inputNode.focus()
      this.activeInputField = inputNode;

      if (this.customKeyboard) {
        this.customKeyboard.active = true; // Show the custom keyboard if needed
      }
    }
  },
  setupKeyboardButtonListeners: function setupKeyboardButtonListeners() {
    var _this = this;

    var allKeyboardButtons = this.getAllKeyboardButtons();
    allKeyboardButtons.forEach(function (button) {
      button.on(cc.Node.EventType.TOUCH_END, _this.onKeyboardButtonClicked, _this);
    });

    if (this.deleteButton) {
      // Add listener for the delete button
      this.deleteButton.on(cc.Node.EventType.TOUCH_END, this.onDeleteButtonClicked, this);
    }
  },
  getAllKeyboardButtons: function getAllKeyboardButtons() {
    var buttons = [];
    buttons = buttons.concat(this.smallAlphabet.children);
    buttons = buttons.concat(this.capitalAlphabet.children);
    buttons = buttons.concat(this.symbolsAlphabet.children);
    buttons = buttons.concat(this.spaceButton);
    buttons = buttons.concat(this.commaButton);
    buttons = buttons.concat(this.dotButton);
    return buttons;
  },
  onKeyboardButtonClicked: function onKeyboardButtonClicked(event) {
    var button = event.target;
    var customEventValue = button._components[1].clickEvents[0].customEventData;
    this.appendToActiveInput(customEventValue);
  },
  appendToActiveInput: function appendToActiveInput(value) {
    if (this.activeInputField) {
      this.activeInputField.string += value; // Append value to the active input field
    }
  },
  onDeleteButtonClicked: function onDeleteButtonClicked() {
    this.removeFromActiveInput();
  },
  //logoutButton Clicked
  logutClick: function logutClick() {
    if (this.lobbyNode.active) {
      this.lobbyNode.active = false;
    }
  },
  removeFromActiveInput: function removeFromActiveInput() {
    if (this.activeInputField && this.activeInputField.string.length > 0) {
      this.activeInputField.string = this.activeInputField.string.slice(0, -1); // Remove last character
    }
  },
  onLoginClick: function onLoginClick() {
    var _this2 = this;

    this.userName.string = "ritik";
    this.password.string = "password";
    var address = K.ServerAddress.ipAddress + K.ServerAPI.login;
    var data = {
      username: this.userName.string,
      password: this.password.string
    };

    if (this.userName.string == "" || this.password.string == "") {
      this.errorLable.string = "Username or Password fields are empty";
      this.loginErrorNode.active = true;
      setTimeout(function () {
        _this2.loginErrorNode.active = false;
      }, 2000);
      return;
    }

    ServerCom.httpRequest("POST", address, data, function (response) {
      if (response.token) {
        var randomNumber = Math.floor(Math.random() * 10) + 1;

        if (cc.sys.isBrowser) {
          document.cookie = "userToken=" + response.token + "; path=/;";
          document.cookie = "index = " + randomNumber;
        } else {
          cc.sys.localStorage.setItem('userToken', response.token);
          cc.sys.localStorage.setItem("index", randomNumber);
        } // Cookies.set("index", randomNumber);


        setTimeout(function () {
          this.lobbyNode.active = true;
        }.bind(this), 1000);
      } else {}
    }.bind(this));
  },
  smallAlphabetBUttonClicked: function smallAlphabetBUttonClicked() {
    if (this.capitalAlphabet.active) {
      this.capitalAlphabet.active = false;
      this.smallAlphabet.active = true;

      if (this.symbolsAlphabet.active) {
        this.symbolsAlphabet.active = false;
      }

      this.smallButton.active = false;
      this.capsButton.active = true;
    } else {
      if (this.symbolsAlphabet.active) {
        this.symbolsAlphabet.active = false;
      }

      this.capitalAlphabet.active = true;
      this.smallAlphabet.active = false;
      this.smallButton.active = true;
      this.capsButton.active = false;
    }
  },
  specialSymbolClicked: function specialSymbolClicked() {
    if (this.capitalAlphabet.active || this.smallAlphabet.active) {
      this.smallAlphabet.active = false;
      this.capitalAlphabet.active = false;
      this.symbolsAlphabet.active = true;
    } else {
      this.symbolsAlphabet.active = false;

      if (!this.smallAlphabet.active) {
        this.smallAlphabet.active = true;
        this.capitalAlphabet.active = false;
      }
    }
  },
  closeKeyBoard: function closeKeyBoard() {
    this.customKeyboard.active = false;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9TY3JpcHRzL2xvZ2luL0xvZ2luLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwidXNlck5hbWUiLCJ0eXBlIiwiRWRpdEJveCIsInBhc3N3b3JkIiwicmVtZW1iZXJNZSIsIlRvZ2dsZSIsImxvYmJ5Tm9kZSIsIk5vZGUiLCJlcnJvckxhYmxlIiwiTGFiZWwiLCJsb2dpbkVycm9yTm9kZSIsImN1c3RvbUtleWJvYXJkIiwic21hbGxBbHBoYWJldCIsImNhcGl0YWxBbHBoYWJldCIsInN5bWJvbHNBbHBoYWJldCIsImNhcHNCdXR0b24iLCJzbWFsbEJ1dHRvbiIsImRlbGV0ZUJ1dHRvbiIsInNwYWNlQnV0dG9uIiwiY29tbWFCdXR0b24iLCJkb3RCdXR0b24iLCJvbkxvYWQiLCJpc0NoZWNrZWQiLCJhY3RpdmVJbnB1dEZpZWxkIiwic2V0dXBJbnB1dEZvY3VzTGlzdGVuZXJzIiwic2V0dXBLZXlib2FyZEJ1dHRvbkxpc3RlbmVycyIsImRpc2FibGVEZWZhdWx0S2V5Ym9hcmQiLCJzeXMiLCJpc01vYmlsZSIsImlzQnJvd3NlciIsImlucHV0cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpbnB1dCIsInN0eWxlIiwicG9pbnRlckV2ZW50cyIsIm5vZGUiLCJvbiIsIkV2ZW50VHlwZSIsIlRPVUNIX0VORCIsIm9uSW5wdXRGaWVsZENsaWNrZWQiLCJldmVudCIsImlucHV0Tm9kZSIsImN1cnJlbnRUYXJnZXQiLCJnZXRDb21wb25lbnQiLCJhY3RpdmUiLCJhbGxLZXlib2FyZEJ1dHRvbnMiLCJnZXRBbGxLZXlib2FyZEJ1dHRvbnMiLCJidXR0b24iLCJvbktleWJvYXJkQnV0dG9uQ2xpY2tlZCIsIm9uRGVsZXRlQnV0dG9uQ2xpY2tlZCIsImJ1dHRvbnMiLCJjb25jYXQiLCJjaGlsZHJlbiIsInRhcmdldCIsImN1c3RvbUV2ZW50VmFsdWUiLCJfY29tcG9uZW50cyIsImNsaWNrRXZlbnRzIiwiY3VzdG9tRXZlbnREYXRhIiwiYXBwZW5kVG9BY3RpdmVJbnB1dCIsInZhbHVlIiwic3RyaW5nIiwicmVtb3ZlRnJvbUFjdGl2ZUlucHV0IiwibG9ndXRDbGljayIsImxlbmd0aCIsInNsaWNlIiwib25Mb2dpbkNsaWNrIiwiYWRkcmVzcyIsIksiLCJTZXJ2ZXJBZGRyZXNzIiwiaXBBZGRyZXNzIiwiU2VydmVyQVBJIiwibG9naW4iLCJkYXRhIiwidXNlcm5hbWUiLCJzZXRUaW1lb3V0IiwiU2VydmVyQ29tIiwiaHR0cFJlcXVlc3QiLCJyZXNwb25zZSIsInRva2VuIiwicmFuZG9tTnVtYmVyIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY29va2llIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImJpbmQiLCJzbWFsbEFscGhhYmV0QlV0dG9uQ2xpY2tlZCIsInNwZWNpYWxTeW1ib2xDbGlja2VkIiwiY2xvc2VLZXlCb2FyZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBRVJDLElBQUFBLFFBQVEsRUFBRTtBQUNOLGlCQUFTLElBREg7QUFFTkMsTUFBQUEsSUFBSSxFQUFFTCxFQUFFLENBQUNNO0FBRkgsS0FGRjtBQU1SQyxJQUFBQSxRQUFRLEVBQUU7QUFDTixpQkFBUyxJQURIO0FBRU5GLE1BQUFBLElBQUksRUFBRUwsRUFBRSxDQUFDTTtBQUZILEtBTkY7QUFVUkUsSUFBQUEsVUFBVSxFQUFFO0FBQ1IsaUJBQVMsSUFERDtBQUVSSCxNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ1M7QUFGRCxLQVZKO0FBY1JDLElBQUFBLFNBQVMsRUFBQztBQUNOLGlCQUFTLElBREg7QUFFTkwsTUFBQUEsSUFBSSxFQUFFTCxFQUFFLENBQUNXO0FBRkgsS0FkRjtBQWtCUkMsSUFBQUEsVUFBVSxFQUFDO0FBQ1AsaUJBQVMsSUFERjtB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QixhQUFLbEMsYUFBTCxDQUFtQmtDLE1BQW5CLEdBQTRCLElBQTVCO0FBQ0EsYUFBS2pDLGVBQUwsQ0FBcUJpQyxNQUFyQixHQUE4QixLQUE5QjtBQUNIO0FBQ0o7QUFDSixHQTdPSTtBQStPTDZDLEVBQUFBLGFBQWEsRUFBRSx5QkFBVTtBQUNyQixTQUFLaEYsY0FBTCxDQUFvQm1DLE1BQXBCLEdBQTZCLEtBQTdCO0FBQ0g7QUFqUEksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAgIHVzZXJOYW1lOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuRWRpdEJveCxcbiAgICAgICAgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5FZGl0Qm94LFxuICAgICAgICB9LFxuICAgICAgICByZW1lbWJlck1lOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuVG9nZ2xlXG4gICAgICAgIH0sXG4gICAgICAgIGxvYmJ5Tm9kZTp7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZSxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JMYWJsZTp7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTpjYy5MYWJlbFxuICAgICAgICB9LFxuICAgICAgICBsb2dpbkVycm9yTm9kZTp7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZVxuICAgICAgICB9LFxuICAgICAgICBjdXN0b21LZXlib2FyZDp7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZSxcbiAgICAgICAgfSxcbiAgICAgICAgc21hbGxBbHBoYWJldDp7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZVxuICAgICAgICB9LFxuICAgICAgICBjYXBpdGFsQWxwaGFiZXQ6e1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLk5vZGVcbiAgICAgICAgfSxcbiAgICAgICAgc3ltYm9sc0FscGhhYmV0OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHNCdXR0b246e1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLk5vZGVcbiAgICAgICAgfSxcbiAgICAgICAgc21hbGxCdXR0b246e1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLk5vZGVcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlQnV0dG9uOiB7XG4gICAgICAgICAgICBkZWZhdWx0Om51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5Ob2RlXG4gICAgICAgIH0sXG4gICAgICAgIHNwYWNlQnV0dG9uOntcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5Ob2RlXG4gICAgICAgIH0sXG4gICAgICAgIGNvbW1hQnV0dG9uOntcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5Ob2RlXG4gICAgICAgIH0sXG4gICAgICAgIGRvdEJ1dHRvbjp7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZVxuICAgICAgICB9XG4gICAgXG4gICAgfSxcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcbiAgICBvbkxvYWQgKCkge1xuICAgICAgICBpZih0aGlzLnJlbWVtYmVyTWUpe1xuICAgICAgICAgICAgdGhpcy5yZW1lbWJlck1lLmlzQ2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9ICAgXG4gICAgICAgIHRoaXMuYWN0aXZlSW5wdXRGaWVsZCA9IG51bGw7IFxuICAgICAgICB0aGlzLnNldHVwSW5wdXRGb2N1c0xpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnNldHVwS2V5Ym9hcmRCdXR0b25MaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlRGVmYXVsdEtleWJvYXJkKCk7XG4gICAgfSxcblxuICAgIGRpc2FibGVEZWZhdWx0S2V5Ym9hcmQoKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNNb2JpbGUgJiYgY2Muc3lzLmlzQnJvd3Nlcikge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHRleHRhcmVhJyk7XG4gICAgICAgICAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICAgICAgaW5wdXQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJzsgLy8gRGlzYWJsZSBpbnRlcmFjdGlvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldHVwSW5wdXRGb2N1c0xpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc01vYmlsZSAmJiBjYy5zeXMuaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggZm9jdXMgZXZlbnQgbGlzdGVuZXJzIHRvIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBpbnB1dCBmaWVsZHNcbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VyTmFtZS5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vbklucHV0RmllbGRDbGlja2VkLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzd29yZC5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vbklucHV0RmllbGRDbGlja2VkLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbklucHV0RmllbGRDbGlja2VkKGV2ZW50KSB7XG4gICAgICAgIC8vIEZvY3VzIHRoZSBjb3JyZXNwb25kaW5nIGlucHV0IGZpZWxkIHRvIHRyaWdnZXIgdGhlIGtleWJvYXJkXG4gICAgICAgIGNvbnN0IGlucHV0Tm9kZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0Q29tcG9uZW50KGNjLkVkaXRCb3gpO1xuICAgICAgICBpZiAoaW5wdXROb2RlKSB7XG4gICAgICAgICAgICAvLyBpbnB1dE5vZGUuZm9jdXMoKVxuICAgICAgICAgICAgdGhpcy5hY3RpdmVJbnB1dEZpZWxkID0gaW5wdXROb2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VzdG9tS2V5Ym9hcmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbUtleWJvYXJkLmFjdGl2ZSA9IHRydWU7IC8vIFNob3cgdGhlIGN1c3RvbSBrZXlib2FyZCBpZiBuZWVkZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXR1cEtleWJvYXJkQnV0dG9uTGlzdGVuZXJzKCkge1xuICAgICAgICBjb25zdCBhbGxLZXlib2FyZEJ1dHRvbnMgPSB0aGlzLmdldEFsbEtleWJvYXJkQnV0dG9ucygpO1xuICAgICAgICBhbGxLZXlib2FyZEJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICAgICAgYnV0dG9uLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vbktleWJvYXJkQnV0dG9uQ2xpY2tlZCwgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5kZWxldGVCdXR0b24pIHsgLy8gQWRkIGxpc3RlbmVyIGZvciB0aGUgZGVsZXRlIGJ1dHRvblxuICAgICAgICAgICAgdGhpcy5kZWxldGVCdXR0b24ub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uRGVsZXRlQnV0dG9uQ2xpY2tlZCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0QWxsS2V5Ym9hcmRCdXR0b25zKCkge1xuICAgICAgICBsZXQgYnV0dG9ucyA9IFtdO1xuICAgICAgICBidXR0b25zID0gYnV0dG9ucy5jb25jYXQodGhpcy5zbWFsbEFscGhhYmV0LmNoaWxkcmVuKTtcbiAgICAgICAgYnV0dG9ucyA9IGJ1dHRvbnMuY29uY2F0KHRoaXMuY2FwaXRhbEFscGhhYmV0LmNoaWxkcmVuKTtcbiAgICAgICAgYnV0dG9ucyA9IGJ1dHRvbnMuY29uY2F0KHRoaXMuc3ltYm9sc0FscGhhYmV0LmNoaWxkcmVuKTtcbiAgICAgICAgYnV0dG9ucyA9IGJ1dHRvbnMuY29uY2F0KHRoaXMuc3BhY2VCdXR0b24pO1xuICAgICAgICBidXR0b25zID0gYnV0dG9ucy5jb25jYXQodGhpcy5jb21tYUJ1dHRvbik7XG4gICAgICAgIGJ1dHRvbnMgPSBidXR0b25zLmNvbmNhdCh0aGlzLmRvdEJ1dHRvbik7XG4gICAgICAgIHJldHVybiBidXR0b25zO1xuICAgIH0sXG5cbiAgICBvbktleWJvYXJkQnV0dG9uQ2xpY2tlZChldmVudCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGN1c3RvbUV2ZW50VmFsdWUgPSBidXR0b24uX2NvbXBvbmVudHNbMV0uY2xpY2tFdmVudHNbMF0uY3VzdG9tRXZlbnREYXRhO1xuICAgICAgICB0aGlzLmFwcGVuZFRvQWN0aXZlSW5wdXQoY3VzdG9tRXZlbnRWYWx1ZSk7XG4gICAgfSxcblxuICAgIGFwcGVuZFRvQWN0aXZlSW5wdXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlSW5wdXRGaWVsZCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVJbnB1dEZpZWxkLnN0cmluZyArPSB2YWx1ZTsgLy8gQXBwZW5kIHZhbHVlIHRvIHRoZSBhY3RpdmUgaW5wdXQgZmllbGRcbiAgICAgICAgfVxuICAgIH0sXG4gICAgb25EZWxldGVCdXR0b25DbGlja2VkKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUZyb21BY3RpdmVJbnB1dCgpO1xuICAgIH0sXG4gICAgXG4gICAgLy9sb2dvdXRCdXR0b24gQ2xpY2tlZFxuICAgIGxvZ3V0Q2xpY2soKXtcbiAgICAgICAgaWYodGhpcy5sb2JieU5vZGUuYWN0aXZlKXtcbiAgICAgICAgICAgIHRoaXMubG9iYnlOb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbW92ZUZyb21BY3RpdmVJbnB1dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlSW5wdXRGaWVsZCAmJiB0aGlzLmFjdGl2ZUlucHV0RmllbGQuc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5wdXRGaWVsZC5zdHJpbmcgPSB0aGlzLmFjdGl2ZUlucHV0RmllbGQuc3RyaW5nLnNsaWNlKDAsIC0xKTsgLy8gUmVtb3ZlIGxhc3QgY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Mb2dpbkNsaWNrICgpe1xuICAgICAgICB0aGlzLnVzZXJOYW1lLnN0cmluZyA9IFwicml0aWtcIjtcbiAgICAgICAgdGhpcy5wYXNzd29yZC5zdHJpbmcgPSBcInBhc3N3b3JkXCI7XG4gICAgICAgIHZhciBhZGRyZXNzID0gSy5TZXJ2ZXJBZGRyZXNzLmlwQWRkcmVzcyArIEsuU2VydmVyQVBJLmxvZ2luO1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJOYW1lLnN0cmluZyxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLnN0cmluZ1xuICAgICAgICB9O1xuICAgICAgICBpZih0aGlzLnVzZXJOYW1lLnN0cmluZyA9PSBcIlwiIHx8IHRoaXMucGFzc3dvcmQuc3RyaW5nID09IFwiXCIpe1xuICAgICAgICAgICAgdGhpcy5lcnJvckxhYmxlLnN0cmluZyA9IFwiVXNlcm5hbWUgb3IgUGFzc3dvcmQgZmllbGRzIGFyZSBlbXB0eVwiXG4gICAgICAgICAgICB0aGlzLmxvZ2luRXJyb3JOb2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luRXJyb3JOb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFNlcnZlckNvbS5odHRwUmVxdWVzdChcIlBPU1RcIiwgYWRkcmVzcywgZGF0YSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UudG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5kb21OdW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkgKyAxO1xuICAgICAgICAgICAgICAgIGlmIChjYy5zeXMuaXNCcm93c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGB1c2VyVG9rZW49JHtyZXNwb25zZS50b2tlbn07IHBhdGg9LztgO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBgaW5kZXggPSAke3JhbmRvbU51bWJlcn1gXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2Muc3lzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyVG9rZW4nLCByZXNwb25zZS50b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGNjLnN5cy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImluZGV4XCIsIHJhbmRvbU51bWJlcik7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDb29raWVzLnNldChcImluZGV4XCIsIHJhbmRvbU51bWJlcik7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9iYnlOb2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgfSxcblxuICAgIHNtYWxsQWxwaGFiZXRCVXR0b25DbGlja2VkOiBmdW5jdGlvbigpe1xuICAgICAgICBpZih0aGlzLmNhcGl0YWxBbHBoYWJldC5hY3RpdmUgKXtcbiAgICAgICAgICAgIHRoaXMuY2FwaXRhbEFscGhhYmV0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zbWFsbEFscGhhYmV0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBpZih0aGlzLnN5bWJvbHNBbHBoYWJldC5hY3RpdmUpe1xuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sc0FscGhhYmV0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zbWFsbEJ1dHRvbi5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY2Fwc0J1dHRvbi5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sc0FscGhhYmV0LmFjdGl2ZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xzQWxwaGFiZXQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhcGl0YWxBbHBoYWJldC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zbWFsbEFscGhhYmV0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zbWFsbEJ1dHRvbi5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jYXBzQnV0dG9uLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBzcGVjaWFsU3ltYm9sQ2xpY2tlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgaWYodGhpcy5jYXBpdGFsQWxwaGFiZXQuYWN0aXZlIHx8IHRoaXMuc21hbGxBbHBoYWJldC5hY3RpdmUpe1xuICAgICAgICAgICAgdGhpcy5zbWFsbEFscGhhYmV0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jYXBpdGFsQWxwaGFiZXQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnN5bWJvbHNBbHBoYWJldC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLnN5bWJvbHNBbHBoYWJldC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmKCF0aGlzLnNtYWxsQWxwaGFiZXQuYWN0aXZlKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNtYWxsQWxwaGFiZXQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcGl0YWxBbHBoYWJldC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjbG9zZUtleUJvYXJkOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmN1c3RvbUtleWJvYXJkLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgIFxufSk7Il19