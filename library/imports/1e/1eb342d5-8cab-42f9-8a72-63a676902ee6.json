{
  "__type__": "cc.TextAsset",
  "_name": "axios.d",
  "_objFlags": 0,
  "_native": "",
  "text": "// TypeScript Version: 4.7\nexport type AxiosHeaderValue = AxiosHeaders | string | string[] | number | boolean | null;\n\ninterface RawAxiosHeaders {\n  [key: string]: AxiosHeaderValue;\n}\n\ntype MethodsHeaders = Partial<{\n  [Key in Method as Lowercase<Key>]: AxiosHeaders;\n} & {common: AxiosHeaders}>;\n\ntype AxiosHeaderMatcher = string | RegExp | ((this: AxiosHeaders, value: string, name: string) => boolean);\n\ntype AxiosHeaderParser = (this: AxiosHeaders, value: AxiosHeaderValue, header: string) => any;\n\nexport class AxiosHeaders {\n  constructor(\n      headers?: RawAxiosHeaders | AxiosHeaders | string\n  );\n\n  [key: string]: any;\n\n  set(headerName?: string, value?: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean): AxiosHeaders;\n\n  get(headerName: string, parser: RegExp): RegExpExecArray | null;\n  get(headerName: string, matcher?: true | AxiosHeaderParser): AxiosHeaderValue;\n\n  has(header: string, matcher?: AxiosHeaderMatcher): boolean;\n\n  delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n\n  clear(matcher?: AxiosHeaderMatcher): boolean;\n\n  normalize(format: boolean): AxiosHeaders;\n\n  concat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n\n  toJSON(asStrings?: boolean): RawAxiosHeaders;\n\n  static from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n\n  static accessor(header: string | string[]): AxiosHeaders;\n\n  static concat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n\n  setContentType(value: ContentType, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getContentType(parser?: RegExp): RegExpExecArray | null;\n  getContentType(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasContentType(matcher?: AxiosHeaderMatcher): boolean;\n\n  setContentLength(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getContentLength(parser?: RegExp): RegExpExecArray | null;\n  getContentLength(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasContentLength(matcher?: AxiosHeaderMatcher): boolean;\n\n  setAccept(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getAccept(parser?: RegExp): RegExpExecArray | null;\n  getAccept(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasAccept(matcher?: AxiosHeaderMatcher): boolean;\n\n  setUserAgent(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getUserAgent(parser?: RegExp): RegExpExecArray | null;\n  getUserAgent(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasUserAgent(matcher?: AxiosHeaderMatcher): boolean;\n\n  setContentEncoding(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getContentEncoding(parser?: RegExp): RegExpExecArray | null;\n  getContentEncoding(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasContentEncoding(matcher?: AxiosHeaderMatcher): boolean;\n\n  setAuthorization(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getAuthorization(parser?: RegExp): RegExpExecArray | null;\n  getAuthorization(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasAuthorization(matcher?: AxiosHeaderMatcher): boolean;\n\n  [Symbol.iterator](): IterableIterator<[string, AxiosHeaderValue]>;\n}\n\ntype CommonRequestHeadersList = 'Accept' | 'Content-Length' | 'User-Agent' | 'Content-Encoding' | 'Authorization';\n\ntype ContentType = AxiosHeaderValue | 'text/html' | 'text/plain' | 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded' | 'application/octet-stream';\n\nexport type RawAxiosRequestHeaders = Partial<RawAxiosHeaders & {\n  [Key in CommonRequestHeadersList]: AxiosHeaderValue;\n} & {\n  'Content-Type': ContentType\n}>;\n\nexport type AxiosRequestHeaders = RawAxiosRequestHeaders & AxiosHeaders;\n\ntype CommonResponseHeadersList = 'Server' | 'Content-Type' | 'Content-Length' | 'Cache-Control'| 'Content-Encoding';\n\ntype RawCommonResponseHeaders = {\n  [Key in CommonResponseHeadersList]: AxiosHeaderValue;\n} & {\n  \"set-cookie\": string[];\n};\n\nexport type RawAxiosResponseHeaders = Partial<RawAxiosHeaders & RawCommonResponseHeaders>;\n\nexport type AxiosResponseHeaders = RawAxiosResponseHeaders & AxiosHeaders;\n\nexport interface AxiosRequestTransformer {\n  (this: InternalAxiosRequestConfig, data: any, headers: AxiosRequestHeaders): any;\n}\n\nexport interface AxiosResponseTransformer {\n  (this: InternalAxiosRequestConfig, data: any, headers: AxiosResponseHeaders, status?: number): any;\n}\n\nexport interface AxiosAdapter {\n  (config: InternalAxiosRequestConfig): AxiosPromise;\n}\n\nexport interface AxiosBasicCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface AxiosProxyConfig {\n  host: string;\n  port: number;\n  auth?: AxiosBasicCredentials;\n  protocol?: string;\n}\n\nexport enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511,\n}\n\nexport type Method =\n    | 'get' | 'GET'\n    | 'delete' | 'DELETE'\n    | 'head' | 'HEAD'\n    | 'options' | 'OPTIONS'\n    | 'post' | 'POST'\n    | 'put' | 'PUT'\n    | 'patch' | 'PATCH'\n    | 'purge' | 'PURGE'\n    | 'link' | 'LINK'\n    | 'unlink' | 'UNLINK';\n\nexport type ResponseType =\n    | 'arraybuffer'\n    | 'blob'\n    | 'document'\n    | 'json'\n    | 'text'\n    | 'stream'\n    | 'formdata';\n\nexport type responseEncoding =\n    | 'ascii' | 'ASCII'\n    | 'ansi' | 'ANSI'\n    | 'binary' | 'BINARY'\n    | 'base64' | 'BASE64'\n    | 'base64url' | 'BASE64URL'\n    | 'hex' | 'HEX'\n    | 'latin1' | 'LATIN1'\n    | 'ucs-2' | 'UCS-2'\n    | 'ucs2' | 'UCS2'\n    | 'utf-8' | 'UTF-8'\n    | 'utf8' | 'UTF8'\n    | 'utf16le' | 'UTF16LE';\n\nexport interface TransitionalOptions {\n  silentJSONParsing?: boolean;\n  forcedJSONParsing?: boolean;\n  clarifyTimeoutError?: boolean;\n}\n\nexport interface GenericAbortSignal {\n  readonly aborted: boolean;\n  onabort?: ((...args: any) => any) | null;\n  addEventListener?: (...args: any) => any;\n  removeEventListener?: (...args: any) => any;\n}\n\nexport interface FormDataVisitorHelpers {\n  defaultVisitor: SerializerVisitor;\n  convertValue: (value: any) => any;\n  isVisitable: (value: any) => boolean;\n}\n\nexport interface SerializerVisitor {\n  (\n      this: GenericFormData,\n      value: any,\n      key: string | number,\n      path: null | Array<string | number>,\n      helpers: FormDataVisitorHelpers\n  ): boolean;\n}\n\nexport interface SerializerOptions {\n  visitor?: SerializerVisitor;\n  dots?: boolean;\n  metaTokens?: boolean;\n  indexes?: boolean | null;\n}\n\n// tslint:disable-next-line\nexport interface FormSerializerOptions extends SerializerOptions {\n}\n\nexport interface ParamEncoder {\n  (value: any, defaultEncoder: (value: any) => any): any;\n}\n\nexport interface CustomParamsSerializer {\n  (params: Record<string, any>, options?: ParamsSerializerOptions): string;\n}\n\nexport interface ParamsSerializerOptions extends SerializerOptions {\n  encode?: ParamEncoder;\n  serialize?: CustomParamsSerializer;\n}\n\ntype MaxUploadRate = number;\n\ntype MaxDownloadRate = number;\n\ntype BrowserProgressEvent = any;\n\nexport interface AxiosProgressEvent {\n  loaded: number;\n  total?: number;\n  progress?: number;\n  bytes: number;\n  rate?: number;\n  estimated?: number;\n  upload?: boolean;\n  download?: boolean;\n  event?: BrowserProgressEvent;\n  lengthComputable: boolean;\n}\n\ntype Milliseconds = number;\n\ntype AxiosAdapterName = 'fetch' | 'xhr' | 'http' | string;\n\ntype AxiosAdapterConfig = AxiosAdapter | AxiosAdapterName;\n\nexport type AddressFamily = 4 | 6 | undefined;\n\nexport interface LookupAddressEntry {\n  address: string;\n  family?: AddressFamily;\n}\n\nexport type LookupAddress = string | LookupAddressEntry;\n\nexport interface AxiosRequestConfig<D = any> {\n  url?: string;\n  method?: Method | string;\n  baseURL?: string;\n  transformRequest?: AxiosRequestTransformer | AxiosRequestTransformer[];\n  transformResponse?: AxiosResponseTransformer | AxiosResponseTransformer[];\n  headers?: (RawAxiosRequestHeaders & MethodsHeaders) | AxiosHeaders;\n  params?: any;\n  paramsSerializer?: ParamsSerializerOptions | CustomParamsSerializer;\n  data?: D;\n  timeout?: Milliseconds;\n  timeoutErrorMessage?: string;\n  withCredentials?: boolean;\n  adapter?: AxiosAdapterConfig | AxiosAdapterConfig[];\n  auth?: AxiosBasicCredentials;\n  responseType?: ResponseType;\n  responseEncoding?: responseEncoding | string;\n  xsrfCookieName?: string;\n  xsrfHeaderName?: string;\n  onUploadProgress?: (progressEvent: AxiosProgressEvent) => void;\n  onDownloadProgress?: (progressEvent: AxiosProgressEvent) => void;\n  maxContentLength?: number;\n  validateStatus?: ((status: number) => boolean) | null;\n  maxBodyLength?: number;\n  maxRedirects?: number;\n  maxRate?: number | [MaxUploadRate, MaxDownloadRate];\n  beforeRedirect?: (options: Record<string, any>, responseDetails: {headers: Record<string, string>, statusCode: HttpStatusCode}) => void;\n  socketPath?: string | null;\n  transport?: any;\n  httpAgent?: any;\n  httpsAgent?: any;\n  proxy?: AxiosProxyConfig | false;\n  cancelToken?: CancelToken;\n  decompress?: boolean;\n  transitional?: TransitionalOptions;\n  signal?: GenericAbortSignal;\n  insecureHTTPParser?: boolean;\n  env?: {\n    FormData?: new (...args: any[]) => object;\n  };\n  formSerializer?: FormSerializerOptions;\n  family?: AddressFamily;\n  lookup?: ((hostname: string, options: object, cb: (err: Error | null, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void) => void) |\n      ((hostname: string, options: object) => Promise<[address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily] | LookupAddress>);\n  withXSRFToken?: boolean | ((config: InternalAxiosRequestConfig) => boolean | undefined);\n  fetchOptions?: Record<string, any>;\n}\n\n// Alias\nexport type RawAxiosRequestConfig<D = any> = AxiosRequestConfig<D>;\n\nexport interface InternalAxiosRequestConfig<D = any> extends AxiosRequestConfig<D> {\n  headers: AxiosRequestHeaders;\n}\n\nexport interface HeadersDefaults {\n  common: RawAxiosRequestHeaders;\n  delete: RawAxiosRequestHeaders;\n  get: RawAxiosRequestHeaders;\n  head: RawAxiosRequestHeaders;\n  post: RawAxiosRequestHeaders;\n  put: RawAxiosRequestHeaders;\n  patch: RawAxiosRequestHeaders;\n  options?: RawAxiosRequestHeaders;\n  purge?: RawAxiosRequestHeaders;\n  link?: RawAxiosRequestHeaders;\n  unlink?: RawAxiosRequestHeaders;\n}\n\nexport interface AxiosDefaults<D = any> extends Omit<AxiosRequestConfig<D>, 'headers'> {\n  headers: HeadersDefaults;\n}\n\nexport interface CreateAxiosDefaults<D = any> extends Omit<AxiosRequestConfig<D>, 'headers'> {\n  headers?: RawAxiosRequestHeaders | AxiosHeaders | Partial<HeadersDefaults>;\n}\n\nexport interface AxiosResponse<T = any, D = any> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: RawAxiosResponseHeaders | AxiosResponseHeaders;\n  config: InternalAxiosRequestConfig<D>;\n  request?: any;\n}\n\nexport class AxiosError<T = unknown, D = any> extends Error {\n  constructor(\n      message?: string,\n      code?: string,\n      config?: InternalAxiosRequestConfig<D>,\n      request?: any,\n      response?: AxiosResponse<T, D>\n  );\n\n  config?: InternalAxiosRequestConfig<D>;\n  code?: string;\n  request?: any;\n  response?: AxiosResponse<T, D>;\n  isAxiosError: boolean;\n  status?: number;\n  toJSON: () => object;\n  cause?: Error;\n  static from<T = unknown, D = any>(\n    error: Error | unknown,\n    code?: string,\n    config?: InternalAxiosRequestConfig<D>,\n    request?: any,\n    response?: AxiosResponse<T, D>,\n    customProps?: object,\n): AxiosError<T, D>;\n  static readonly ERR_FR_TOO_MANY_REDIRECTS = \"ERR_FR_TOO_MANY_REDIRECTS\";\n  static readonly ERR_BAD_OPTION_VALUE = \"ERR_BAD_OPTION_VALUE\";\n  static readonly ERR_BAD_OPTION = \"ERR_BAD_OPTION\";\n  static readonly ERR_NETWORK = \"ERR_NETWORK\";\n  static readonly ERR_DEPRECATED = \"ERR_DEPRECATED\";\n  static readonly ERR_BAD_RESPONSE = \"ERR_BAD_RESPONSE\";\n  static readonly ERR_BAD_REQUEST = \"ERR_BAD_REQUEST\";\n  static readonly ERR_NOT_SUPPORT = \"ERR_NOT_SUPPORT\";\n  static readonly ERR_INVALID_URL = \"ERR_INVALID_URL\";\n  static readonly ERR_CANCELED = \"ERR_CANCELED\";\n  static readonly ECONNABORTED = \"ECONNABORTED\";\n  static readonly ETIMEDOUT = \"ETIMEDOUT\";\n}\n\nexport class CanceledError<T> extends AxiosError<T> {\n}\n\nexport type AxiosPromise<T = any> = Promise<AxiosResponse<T>>;\n\nexport interface CancelStatic {\n  new (message?: string): Cancel;\n}\n\nexport interface Cancel {\n  message: string | undefined;\n}\n\nexport interface Canceler {\n  (message?: string, config?: AxiosRequestConfig, request?: any): void;\n}\n\nexport interface CancelTokenStatic {\n  new (executor: (cancel: Canceler) => void): CancelToken;\n  source(): CancelTokenSource;\n}\n\nexport interface CancelToken {\n  promise: Promise<Cancel>;\n  reason?: Cancel;\n  throwIfRequested(): void;\n}\n\nexport interface CancelTokenSource {\n  token: CancelToken;\n  cancel: Canceler;\n}\n\nexport interface AxiosInterceptorOptions {\n  synchronous?: boolean;\n  runWhen?: (config: InternalAxiosRequestConfig) => boolean;\n}\n\nexport interface AxiosInterceptorManager<V> {\n  use(onFulfilled?: ((value: V) => V | Promise<V>) | null, onRejected?: ((error: any) => any) | null, options?: AxiosInterceptorOptions): number;\n  eject(id: number): void;\n  clear(): void;\n}\n\nexport class Axios {\n  constructor(config?: AxiosRequestConfig);\n  defaults: AxiosDefaults;\n  interceptors: {\n    request: AxiosInterceptorManager<InternalAxiosRequestConfig>;\n    response: AxiosInterceptorManager<AxiosResponse>;\n  };\n  getUri(config?: AxiosRequestConfig): string;\n  request<T = any, R = AxiosResponse<T>, D = any>(config: AxiosRequestConfig<D>): Promise<R>;\n  get<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  delete<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  head<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  options<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  post<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  put<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  patch<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  postForm<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  putForm<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  patchForm<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n}\n\nexport interface AxiosInstance extends Axios {\n  <T = any, R = AxiosResponse<T>, D = any>(config: AxiosRequestConfig<D>): Promise<R>;\n  <T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n\n  defaults: Omit<AxiosDefaults, 'headers'> & {\n    headers: HeadersDefaults & {\n      [key: string]: AxiosHeaderValue\n    }\n  };\n}\n\nexport interface GenericFormData {\n  append(name: string, value: any, options?: any): any;\n}\n\nexport interface GenericHTMLFormElement {\n  name: string;\n  method: string;\n  submit(): void;\n}\n\nexport function getAdapter(adapters: AxiosAdapterConfig | AxiosAdapterConfig[] | undefined): AxiosAdapter;\n\nexport function toFormData(sourceObj: object, targetFormData?: GenericFormData, options?: FormSerializerOptions): GenericFormData;\n\nexport function formToJSON(form: GenericFormData|GenericHTMLFormElement): object;\n\nexport function isAxiosError<T = any, D = any>(payload: any): payload is AxiosError<T, D>;\n\nexport function spread<T, R>(callback: (...args: T[]) => R): (array: T[]) => R;\n\nexport function isCancel(value: any): value is Cancel;\n\nexport function all<T>(values: Array<T | Promise<T>>): Promise<T[]>;\n\nexport interface AxiosStatic extends AxiosInstance {\n  create(config?: CreateAxiosDefaults): AxiosInstance;\n  Cancel: CancelStatic;\n  CancelToken: CancelTokenStatic;\n  Axios: typeof Axios;\n  AxiosError: typeof AxiosError;\n  HttpStatusCode: typeof HttpStatusCode;\n  readonly VERSION: string;\n  isCancel: typeof isCancel;\n  all: typeof all;\n  spread: typeof spread;\n  isAxiosError: typeof isAxiosError;\n  toFormData: typeof toFormData;\n  formToJSON: typeof formToJSON;\n  getAdapter: typeof getAdapter;\n  CanceledError: typeof CanceledError;\n  AxiosHeaders: typeof AxiosHeaders;\n}\n\ndeclare const axios: AxiosStatic;\n\nexport default axios;\n"
}